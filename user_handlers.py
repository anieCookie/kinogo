from aiogram import Router, F
from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from Keyboards import main_inlines_kb, st, recommend, first_button_kb
from aiogram.fsm.state import State, StatesGroup
from sentence_transformers import SentenceTransformer
import sqlite3
import os
import json
import aiosqlite
import numpy as np
from aiogram.utils.keyboard import InlineKeyboardBuilder

DB_PATH = "movies.db"
USER_PATH = "user.db"
REC_PATH = "rec.db"

global user_id
q = " "

semantic_model = SentenceTransformer("sberbank-ai/sbert_large_nlu_ru")
user_router = Router()


def create_db():
    conn = sqlite3.connect(USER_PATH)
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_movies (
        id INTEGER PRIMARY KEY AUTOINCREMENT, 
        user_id INTEGER NOT NULL, 
        title TEXT NOT NULL, 
        rating TEXT NOT NULL,
        genre TEXT NOT NULL,
        watched INTEGER DEFAULT 0, 
        mark INTEGER DEFAULT 0,
        UNIQUE (user_id, title)
    );
    """)

    conn.commit()
    conn.close()

create_db()

def do_db():
    conn = sqlite3.connect(REC_PATH)
    cursor = conn.cursor()

    cursor.execute("""
            CREATE TABLE IF NOT EXISTS recommendations (
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                user_id TEXT NOT NULL, 
                q TEXT NOT NULL, 
                UNIQUE (user_id)
            );
            """)

    conn.commit()
    conn.close()

do_db()


async def set_processing(state: FSMContext, is_processing: bool):
    await state.update_data(is_processing=is_processing)

async def is_processing(state: FSMContext):
    data = await state.get_data()
    return data.get("is_processing", False)

class Work(StatesGroup):
    wait = State()
    process = State()
    mark = State()



@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã <b>BackSpace</b> üåå\n –Ø —É–≤–µ—Ä–µ–Ω, –≤–∞–º –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è)",
        reply_markup=first_button_kb, parse_mode='HTML')

@user_router.message(F.text == "–ú–µ–Ω—é" )
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —Ñ–∏–ª—å–º—ã",
                         reply_markup=main_inlines_kb)

@user_router.message(Command("menu"))
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è –∑–Ω–∞—é –ø—Ä–æ —Ñ–∏–ª—å–º—ã",
                         reply_markup=main_inlines_kb)

@user_router.message(Command("des"))
async def cmd_search_movie(message: types.Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ ")
    await state.set_state(Work.wait)

@user_router.callback_query(F.data == "recommend")
async def cmd_o(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å",
                         reply_markup=recommend)

@user_router.callback_query(F.data == "stat")
async def cmd_o(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç—å", reply_markup=st)

@user_router.callback_query(F.data == "pr")
async def show_all_movies(callback: types.CallbackQuery):
    async with aiosqlite.connect(USER_PATH) as db:
        query = """
        SELECT title, rating, genre FROM user_movies
        """
        async with db.execute(query) as cursor:
            movies = await cursor.fetchall()

    if movies:
        result = "\n\n".join(
            f"üé¨ <b>{title}</b>\n‚≠ê {rating}\nüìå {genre}"
            for title, rating, genre in movies
        )
    else:
        result = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤."


    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="back52")
    keyboard.adjust(1)

    sent_message = await callback.message.answer(result, parse_mode="HTML", reply_markup=keyboard.as_markup())

    @user_router.callback_query(F.data == "back52")
    async def cmd_back(callback: types.CallbackQuery):
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)

@user_router.callback_query(F.data == "oc")
async def cmd_o(callback: types.CallbackQuery):
    async with aiosqlite.connect(USER_PATH) as db:
        query = """
        SELECT title, mark, genre FROM user_movies WHERE mark != 0
        """
        async with db.execute(query) as cursor:
            movies = await cursor.fetchall()

    if movies:
        result = "\n\n".join(
            f"üé¨ <b>{title}</b>\n‚≠ê {mark} - –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞\nüìå {genre}"
            for title, mark, genre in movies
        )
    else:
        result = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤."

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="back42")
    keyboard.adjust(1)

    sent_message = await callback.message.answer(result, parse_mode="HTML", reply_markup=keyboard.as_markup())

    @user_router.callback_query(F.data == "back42")
    async def cmd_back(callback: types.CallbackQuery):
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)

@user_router.callback_query(F.data == "movie")
async def cmd_search_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ ")
    await state.set_state(Work.wait)

@user_router.callback_query(F.data == "add_tag")
async def cmd_search_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º")
    await state.set_state(Work.wait)

@user_router.callback_query(F.data == "rec1")
async def show_recommendations(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    conn = sqlite3.connect(REC_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    conn.close()

    if not (result and result[0].strip()):
        await callback.message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π ¬´–ó–∞–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚úçÔ∏è¬ª",
            reply_markup=first_button_kb
        )
        return

    results = description(result)
    # –§–∏–ª—å–º 1
    title1, rating1, country1, genre1, year1, duration1, director1, actors1, tags1, about1 = results[0]
    response1 = f"üé¨ <b>{title1}</b>\n‚≠ê {rating1}\nüìå {genre1}\nüìñ {about1}"
    keyboard1 = InlineKeyboardBuilder()
    keyboard1.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="ar1")
    keyboard1.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data="w1")
    keyboard1.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data="rate1")
    keyboard1.button(text="üìΩÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ", callback_data="info01")
    keyboard1.adjust(1)
    await callback.message.answer(response1, parse_mode="HTML", reply_markup=keyboard1.as_markup())

    @user_router.callback_query(F.data == "ar1")
    async def add_to_recommendations(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tags = tags1

        conn = sqlite3.connect(REC_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            updated_rec = existing_entry[0] + ", " + tags
            cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
        else:
            cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, tags))

        conn.commit()
        conn.close()

        await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    @user_router.callback_query(F.data.startswith("rate1"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title1, rating_g=genre1, rating_r=rating1)

        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º ¬´{title1}¬ª –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w1")
    async def handle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç)
            cursor.execute("""
                    INSERT OR IGNORE INTO user_movies (user_id, title, watched, mark, rating, genre)
                    VALUES (?, ?, 1, 0, ?, ?)
                """, (user_id, title1, rating1, genre1))

            conn.commit()

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies
            cursor.execute("SELECT * FROM user_movies")
            rows = cursor.fetchall()

            # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

        finally:
            conn.close()

        await callback.answer("–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö! üé¨")

    @user_router.callback_query(F.data == "info1")
    async def cmd_start_ai(callback: types.CallbackQuery):
        response1 = f"üé¨ <b>{title1}</b>\n‚≠ê {rating1}\n\nüìå {genre1}, {country1}, {year1} –≥–æ–¥\n\n‚ÑπÔ∏è {duration1}\n\nüßë‚Äç {director1}\nüé≠ {actors1}\n\nüìñ {about1}"

        keyboardr1 = InlineKeyboardBuilder()
        keyboardr1.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="backr1")
        keyboardr1.adjust(1)
        sent_message = await callback.message.answer(response1, parse_mode="HTML", reply_markup=keyboardr1.as_markup())

        @user_router.callback_query(F.data == "backr1")
        async def cmd_back(callback: types.CallbackQuery):
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)

    # –§–∏–ª—å–º 2
    title2, rating2, country2, genre2, year2, duration2, director2, actors2, tags2, about2 = results[1]
    response2 = f"üé¨ <b>{title2}</b>\n‚≠ê {rating2}\nüìå {genre2}\nüìñ {about2}"
    keyboard2 = InlineKeyboardBuilder()
    keyboard2.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"ar2")
    keyboard2.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"w2")
    keyboard2.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate2")
    keyboard2.button(text="üìΩÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ", callback_data="info2")
    keyboard2.adjust(1)
    await callback.message.answer(response2, parse_mode="HTML", reply_markup=keyboard2.as_markup())

    @user_router.callback_query(F.data == "ar2")
    async def add_to_recommendations(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tags = tags2

        conn = sqlite3.connect(REC_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            updated_rec = existing_entry[0] + ", " + tags
            cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
        else:
            cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, tags))

        conn.commit()
        conn.close()

        await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


    @user_router.callback_query(F.data.startswith("rate2"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title2, rating_g=genre2, rating_r=rating2)

        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º ¬´{title2}¬ª –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w2")
    async def handle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç)
            cursor.execute("""
                    INSERT OR IGNORE INTO user_movies (user_id, title, watched, mark, rating, genre)
                    VALUES (?, ?, 1, 0, ?, ?)
                """, (user_id, title2, rating2, genre2))

            conn.commit()

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies
            cursor.execute("SELECT * FROM user_movies")
            rows = cursor.fetchall()

            # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–º

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

        finally:
            conn.close()

        await callback.answer("–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö! üé¨")

    @user_router.callback_query(F.data == "info2")
    async def cmd_start_ai(callback: types.CallbackQuery):
        response2 = f"üé¨ <b>{title2}</b>\n‚≠ê {rating2}\n\nüìå {genre2}, {country2}, {year2} –≥–æ–¥\n\n‚ÑπÔ∏è {duration2}\n\nüßë‚Äç {director2}\nüé≠ {actors2}\n\nüìñ {about2}"

        keyboardr2 = InlineKeyboardBuilder()
        keyboardr2.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="backr2")
        keyboardr2.adjust(1)
        sent_message = await callback.message.answer(response2, parse_mode="HTML", reply_markup=keyboardr2.as_markup())

        @user_router.callback_query(F.data == "backr2")
        async def cmd_back(callback: types.CallbackQuery):
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)

    # –§–∏–ª—å–º 3
    title3, rating3, country3, genre3, year3, duration3, director3, actors3, tags3, about3 = results[2]
    response3 = f"üé¨ <b>{title3}</b>\n‚≠ê {rating3}\nüìå {genre3}\nüìñ {about3}"
    keyboard3 = InlineKeyboardBuilder()
    keyboard3.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"ar3")
    keyboard3.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"w3")
    keyboard3.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate3")
    keyboard3.button(text="üìΩÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ", callback_data="info3")
    keyboard3.adjust(1)
    await callback.message.answer(response3, parse_mode="HTML", reply_markup=keyboard3.as_markup())

    @user_router.callback_query(F.data == "ar3")
    async def add_to_recommendations(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tags = tags3

        conn = sqlite3.connect(REC_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            updated_rec = existing_entry[0] + ", " + tags
            cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
        else:
            cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, tags))

        conn.commit()
        conn.close()

        await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    @user_router.callback_query(F.data.startswith("rate3"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title3, rating_g=genre3, rating_r=rating3)
        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º ¬´{title3}¬ª –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w3")
    async def handle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç)
            cursor.execute("""
                    INSERT OR IGNORE INTO user_movies (user_id, title, watched, mark, rating, genre)
                    VALUES (?, ?, 1, 0, ?, ?)
                """, (user_id, title3, rating3, genre3))

            conn.commit()

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies
            cursor.execute("SELECT * FROM user_movies")
            rows = cursor.fetchall()

            # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–º

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

        finally:
            conn.close()

        await callback.answer("–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö! üé¨")

    @user_router.callback_query(F.data == "info3")
    async def cmd_start_ai(callback: types.CallbackQuery):
        response3 = f"üé¨ <b>{title3}</b>\n‚≠ê {rating3}\n\nüìå {genre3}, {country3}, {year3} –≥–æ–¥\n\n‚ÑπÔ∏è {duration3}\n\nüßë‚Äç {director3}\nüé≠ {actors3}\n\nüìñ {about3}"

        keyboardr3 = InlineKeyboardBuilder()
        keyboardr3.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="backr3")
        keyboardr3.adjust(1)
        sent_message = await callback.message.answer(response3, parse_mode="HTML", reply_markup=keyboardr3.as_markup())

        @user_router.callback_query(F.data == "backr3")
        async def cmd_back(callback: types.CallbackQuery):
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)

    await state.clear()



    await callback.message.answer("<i>–ï—Å–ª–∏ –ø–æ–¥–±–æ—Ä–∫–∞ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∞—Å, —É—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –∏—Ö</i>",
                                  reply_markup=first_button_kb, parse_mode='HTML')

@user_router.callback_query(F.data == "rec2")
async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?")
    await state.set_state(Work.process)


@user_router.callback_query(F.data == "rec3")
async def reset_recommendations(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    conn = sqlite3.connect(REC_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
    existing_entry = cursor.fetchone()

    if existing_entry:

        cursor.execute("UPDATE recommendations SET q = '' WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, '')", (user_id,))

    conn.commit()
    conn.close()

    await callback.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")




def description(query):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, rating, country, genre, year, duration, director, actors, tags, about, embedding_str1 FROM movies")
    rows = cursor.fetchall()
    conn.close()

    query_embedding = semantic_model.encode(query)
    results = []

    for title, rating, country, genre, year, duration, director, actors, tags, about, emb_str in rows:
        try:
            movie_embedding = np.array(json.loads(emb_str))
        except Exception:
            continue
        norm_q = np.linalg.norm(query_embedding)
        norm_m = np.linalg.norm(movie_embedding)

        similarity = np.dot(query_embedding, movie_embedding) / (norm_q * norm_m) if norm_q and norm_m else 0

        results.append((title, rating, country, genre, year, duration, director, actors, tags, about, similarity))

    results.sort(key=lambda x: x[10], reverse=True)
    return [(title, rating, country, genre, year, duration, director, actors, tags, about) for title, rating, country, genre, year, duration, director, actors, tags, about, _ in results[:3]]

def tag(query):
    """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤.
        """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT title, rating, country, genre, year, duration, director, actors, tags, about, embedding_str2 FROM movies")
    rows = cursor.fetchall()
    conn.close()

    query_embedding = semantic_model.encode(query)
    results = []

    for title, rating, country, genre, year, duration, director, actors, tags, about, emb_str in rows:
        try:
            movie_embedding = np.array(json.loads(emb_str))
        except Exception:
            continue
        norm_q = np.linalg.norm(query_embedding)
        norm_m = np.linalg.norm(movie_embedding)

        similarity = np.dot(query_embedding, movie_embedding) / (norm_q * norm_m) if norm_q and norm_m else 0

        results.append((title, rating, country, genre, year, duration, director, actors, tags, about, similarity))

    results.sort(key=lambda x: x[10], reverse=True)
    return [(title, rating, country, genre, year, duration, director, actors, tags, about) for
            title, rating, country, genre, year, duration, director, actors, tags, about, _ in results[:3]]



@user_router.message(Work.wait)
async def process_movie(message: types.Message, state: FSMContext):

    query = message.text.strip()
    results = description(query)

    if not results or len(results) < 3:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    # –§–∏–ª—å–º 1
    title1, rating1, country1, genre1, year1, duration1, director1, actors1, tags1, about1 = results[0]
    response1 = f"üé¨ <b>{title1}</b>\n‚≠ê {rating1}\nüìå {genre1}\nüìñ {about1}"
    keyboard1 = InlineKeyboardBuilder()
    keyboard1.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="ar1")
    keyboard1.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"w1")
    keyboard1.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data="rate1")
    keyboard1.button(text="üìΩÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ", callback_data="info01")
    keyboard1.adjust(1)
    await message.answer(response1, parse_mode="HTML", reply_markup=keyboard1.as_markup())

    @user_router.callback_query(F.data == "ar1")
    async def add_to_recommendations(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tags = tags1

        conn = sqlite3.connect(REC_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            updated_rec = existing_entry[0] + ", " + tags
            cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
        else:
            cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, tags))

        conn.commit()
        conn.close()

        await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

    @user_router.callback_query(F.data.startswith("rate1"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title1, rating_g=genre1, rating_r=rating1)

        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º ¬´{title1}¬ª –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w1")
    async def handle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç)
            cursor.execute("""
                INSERT OR IGNORE INTO user_movies (user_id, title, watched, mark, rating, genre)
                    VALUES (?, ?, 1, 0, ?, ?)
                """, (user_id, title1, rating1, genre1))

            conn.commit()

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies
            cursor.execute("SELECT * FROM user_movies")
            rows = cursor.fetchall()

            # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–º

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

        finally:
            conn.close()

        await callback.answer("–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö! üé¨")

    @user_router.callback_query(F.data == "info01")
    async def cmd_start_ai(callback: types.CallbackQuery):
        response1 = f"üé¨ <b>{title1}</b>\n‚≠ê {rating1}\n\nüìå {genre1}, {country1}, {year1} –≥–æ–¥\n\n‚ÑπÔ∏è {duration1}\n\nüßë‚Äç {director1}\nüé≠ {actors1}\n\nüìñ {about1}"

        keyboard01 = InlineKeyboardBuilder()
        keyboard01.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="back1")
        keyboard01.adjust(1)
        sent_message = await callback.message.answer(response1, parse_mode="HTML", reply_markup=keyboard01.as_markup())

        @user_router.callback_query(F.data == "back1")
        async def cmd_back(callback: types.CallbackQuery):
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)



    # –§–∏–ª—å–º 2
    title2, rating2, country2, genre2, year2, duration2, director2, actors2, tags2, about2 = results[1]
    response2 = f"üé¨ <b>{title2}</b>\n‚≠ê {rating2}\nüìå {genre2}\nüìñ {about2}"
    keyboard2 = InlineKeyboardBuilder()
    keyboard2.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"ar2")
    keyboard2.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"w2")
    keyboard2.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate2")
    keyboard2.button(text="üìΩÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ", callback_data="info02")
    keyboard2.adjust(1)
    await message.answer(response2, parse_mode="HTML", reply_markup=keyboard2.as_markup())

    @user_router.callback_query(F.data == "ar2")
    async def add_to_recommendations(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tags = tags2

        conn = sqlite3.connect(REC_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            updated_rec = existing_entry[0] + ", " + tags
            cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
        else:
            cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, tags))

        conn.commit()
        conn.close()

        await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


    @user_router.callback_query(F.data.startswith("rate2"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title2, rating_g=genre2, rating_r=rating2)

        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º ¬´{title2}¬ª –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w2")
    async def handle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç)
            cursor.execute("""
                    INSERT OR IGNORE INTO user_movies (user_id, title, watched, mark, rating, genre)
                    VALUES (?, ?, 1, 0, ?, ?)
                """, (user_id, title2, rating2, genre2))

            conn.commit()

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies
            cursor.execute("SELECT * FROM user_movies")
            rows = cursor.fetchall()

            # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–º

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

        finally:
            conn.close()

        await callback.answer("–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö! üé¨")

    @user_router.callback_query(F.data == "info02")
    async def cmd_start_ai(callback: types.CallbackQuery):
        response02 = f"üé¨ <b>{title2}</b>\n‚≠ê {rating2}\n\nüìå {genre2}, {country2}, {year2} –≥–æ–¥\n\n‚ÑπÔ∏è {duration2}\n\nüßë‚Äç {director2}\nüé≠ {actors2}\n\nüìñ {about2}"
        keyboard02 = InlineKeyboardBuilder()
        keyboard02.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="back2")
        keyboard02.adjust(1)
        sent_message = await callback.message.answer(response02, parse_mode="HTML", reply_markup=keyboard02.as_markup())

        @user_router.callback_query(F.data == "back2")
        async def cmd_back(callback: types.CallbackQuery):
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)



    # –§–∏–ª—å–º 3
    title3, rating3, country3, genre3, year3, duration3, director3, actors3, tags3, about3 = results[2]
    response3 = f"üé¨ <b>{title3}</b>\n‚≠ê {rating3}\nüìå {genre3}\nüìñ {about3}"
    keyboard3 = InlineKeyboardBuilder()
    keyboard3.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"ar3")
    keyboard3.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"w3")
    keyboard3.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate3")
    keyboard3.button(text="üìΩÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ", callback_data="info03")
    keyboard3.adjust(1)
    await message.answer(response3, parse_mode="HTML", reply_markup=keyboard3.as_markup())

    @user_router.callback_query(F.data == "ar3")
    async def add_to_recommendations(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        tags = tags3

        conn = sqlite3.connect(REC_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
        existing_entry = cursor.fetchone()

        if existing_entry:
            updated_rec = existing_entry[0] + ", " + tags
            cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
        else:
            cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, tags))

        conn.commit()
        conn.close()

        await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


    @user_router.callback_query(F.data.startswith("rate3"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title3, rating_g=genre3, rating_r=rating3)
        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º ¬´{title3}¬ª –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w3")
    async def handle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –µ—â—ë –Ω–µ—Ç)
            cursor.execute("""
                    INSERT OR IGNORE INTO user_movies (user_id, title, watched, mark, rating, genre)
                    VALUES (?, ?, 1, 0, ?, ?)
                """, (user_id, title3, rating3, genre3))

            conn.commit()

            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies
            cursor.execute("SELECT * FROM user_movies")
            rows = cursor.fetchall()

            # –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)  # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–º

        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")

        finally:
            conn.close()

        await callback.answer("–§–∏–ª—å–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö! üé¨")

    @user_router.callback_query(F.data == "info03")
    async def cmd_start_ai(callback: types.CallbackQuery):
        response03 = f"üé¨ <b>{title3}</b>\n‚≠ê {rating3}\n\nüìå {genre3}, {country3}, {year3} –≥–æ–¥\n\n‚ÑπÔ∏è {duration3}\n\nüßë‚Äç {director3}\nüé≠ {actors3}\n\nüìñ {about3}"

        keyboard03 = InlineKeyboardBuilder()
        keyboard03.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data="back3")
        keyboard03.adjust(1)
        sent_message = await callback.message.answer(response03, parse_mode="HTML", reply_markup=keyboard03.as_markup())

        @user_router.callback_query(F.data == "back3")
        async def cmd_back(callback: types.CallbackQuery):
            await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=sent_message.message_id)

    await state.clear()
    await message.answer("<i>–ï—Å–ª–∏ –ø–æ–¥–±–æ—Ä–∫–∞ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –í–∞—Å, –æ–ø–∏—à–∏—Ç–µ —Ñ–∏–ª—å–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑</i>",
                                  reply_markup=first_button_kb, parse_mode='HTML')

@user_router.message(Work.mark)
async def save_rating(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    title = data.get("rating_title")
    rating = data.get("rating_r")
    genre = data.get("rating_g")
    print(title)

    if not title:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    try:
        rating0 = int(message.text)
        if not (1 <= rating0 <= 10):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return

        conn = sqlite3.connect(USER_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM user_movies WHERE user_id = ? AND title = ?", (user_id, title))
        existing_entry = cursor.fetchone()

        if existing_entry:
            cursor.execute("UPDATE user_movies SET mark = ? WHERE user_id = ? AND title = ? AND rating = ? AND genre = ?", (rating0, user_id, title, rating, genre))
        else:
            cursor.execute("INSERT INTO user_movies (user_id, title, watched, mark, rating, genre) VALUES (?, ?, 1, ?, ?, ?)",
                           (user_id, title, rating0, rating, genre))

        conn.commit()

        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_movies –∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        cursor.execute("SELECT * FROM user_movies")
        rows = cursor.fetchall()
        for row in rows:
            print(row)

        await message.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–∏–ª—å–º—É ¬´{title}¬ª –æ—Ü–µ–Ω–∫—É {rating0}/10",reply_markup=first_button_kb)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        conn.close()
        await state.clear()

@user_router.message(Work.process)
async def cmd_ai_process(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_text = message.text.strip() if message.text else ""

    if not user_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        return

    conn = sqlite3.connect(REC_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT q FROM recommendations WHERE user_id = ?", (user_id,))
    existing_entry = cursor.fetchone()

    if existing_entry:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ rec, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        updated_rec = existing_entry[0] + ", " + user_text
        cursor.execute("UPDATE recommendations SET q = ? WHERE user_id = ?", (updated_rec, user_id))
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("INSERT INTO recommendations (user_id, q) VALUES (?, ?)", (user_id, user_text))

    conn.commit()
    conn.close()

    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=first_button_kb)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ



@user_router.message()
async def echo_messages(message: types.Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    if message.text:
        await message.answer(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ...\n–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í–æ—Ç –º–æ–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"                                  "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n")
    else:
        try:
            await message.copy_to(chat_id=message.chat.id)
        except TypeError:
            await message.reply(text="üí•ü´£ –ù–∏—á–µ–≥–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ...")
