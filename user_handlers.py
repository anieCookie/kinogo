from aiogram import Router, F
from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from Keyboards import main_inlines_kb, lib, tags, recommend, first_button_kb, lol_button_kb
from ai_generators import generate
from aiogram.fsm.state import State, StatesGroup
from context import ContexManager
from sentence_transformers import SentenceTransformer
import sqlite3
import os
import json
import numpy as np
from aiogram.utils.keyboard import InlineKeyboardBuilder

DB_PATH = "movies.db"
q = " "
semantic_model = SentenceTransformer("all-MiniLM-L12-v2")

context = ContexManager()
user_router = Router()



#–•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
async def set_processing(state: FSMContext, is_processing: bool):
    await state.update_data(is_processing=is_processing)

async def is_processing(state: FSMContext):
    data = await state.get_data()
    return data.get("is_processing", False)

class Work(StatesGroup):
    wait = State()
    process = State()
    mark = State()



#–ë–∞–∑–∞
@user_router.message(F.text == "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def clear1(message: types.Message):
    context.contex = {}
    await message.answer(text="–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


#–°—Ç–∞—Ä—Ç
@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–¢—ã –ø–æ–ø–∞–ª –Ω–∞ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã <b>BackSpace</b> üåå, —è —É–≤–µ—Ä–µ–Ω, –≤–∞–º –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è)",
        reply_markup=first_button_kb, parse_mode='HTML')


@user_router.message(F.text == "–ú–µ–Ω—é")
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é ",
                         reply_markup=main_inlines_kb)


@user_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è –∑–Ω–∞—é –æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ ",
                         reply_markup=main_inlines_kb)



@user_router.callback_query(F.data == "lib")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞ –∫–∞–∫—É—é –±—É–∫–≤—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ–≥?",
                         reply_markup=lib)

@user_router.callback_query(F.data == "genre")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ—Ç, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ:")

@user_router.callback_query(F.data == "tags")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ—Ç, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ:")


@user_router.callback_query(F.data == "tag")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º",
                         reply_markup=tags)

@user_router.callback_query(F.data == "recommend")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:",
                         reply_markup=recommend)






@user_router.callback_query(F.data == "movie")
async def cmd_search_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–ø–∏—à–∏ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ")
    await state.set_state(Work.wait)



@user_router.callback_query(F.data == "add_tag")
async def cmd_search_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ")
    await state.set_state(Work.wait)



@user_router.callback_query(F.data == "rec1")
async def cmd_start_eda_callback(callback: types.CallbackQuery, state: FSMContext):
    kek = await callback.message.answer("–°–µ–π—á–∞—Å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    data = await state.get_data()
    user_query = data.get("q", "").strip()

    # –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not user_query:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è!",
                                      reply_markup=main_inlines_kb)
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
        await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = description(user_query)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if results:
        response = "\n\n".join([f"üé¨ {title}\n‚≠ê {rating}\nüìå {genre}\nüìñ {about}" for title, genre, year, about, rating in results])
    else:
        response = "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await callback.message.answer(response.encode("utf-16", "surrogatepass").decode("utf-16"))

    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.message.answer("<i>–ï—Å–ª–∏ –ø–æ–¥–±–æ—Ä–∫–∞ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∞—Å, —É—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –∏—Ö</i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')



@user_router.callback_query(F.data == "rec2")
async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if "q" not in data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è q
        await state.update_data(q="")  # –°–æ–∑–¥–∞—ë–º q, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    await callback.message.answer("–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?")
    await state.set_state(Work.process)


@user_router.callback_query(F.data == "rec3")
async def cmd_start_eda_callback(callback: types.CallbackQuery, state: FSMContext):
    kek = await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")

    # –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π q –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(q=" ")

    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)

    await callback.message.answer("<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã</i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')




def description(query):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, genre, year, about, rating, embedding_str1 FROM movies")
    rows = cursor.fetchall()
    conn.close()

    query_embedding = semantic_model.encode(query)
    results = []

    for title, genre, year, about, rating, emb_str in rows:
        try:
            movie_embedding = np.array(json.loads(emb_str))
        except Exception:
            continue
        norm_q = np.linalg.norm(query_embedding)
        norm_m = np.linalg.norm(movie_embedding)
        similarity = np.dot(query_embedding, movie_embedding) / (norm_q * norm_m) if norm_q and norm_m else 0

        results.append((title, genre, year, about, rating, similarity))

    results.sort(key=lambda x: x[5], reverse=True)
    return [(title, genre, year, about, rating) for title, genre, year, about, rating, _ in results[:3]]

def tag(query):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, genre, year, about, rating, embedding_str2 FROM movies")
    rows = cursor.fetchall()
    conn.close()

    query_embedding = semantic_model.encode(query)
    results = []

    for title, genre, year, about, rating, emb_str in rows:
        try:
            movie_embedding = np.array(json.loads(emb_str))
        except Exception:
            continue
        norm_q = np.linalg.norm(query_embedding)
        norm_m = np.linalg.norm(movie_embedding)
        similarity = np.dot(query_embedding, movie_embedding) / (norm_q * norm_m) if norm_q and norm_m else 0
        if similarity > 0.3:
            results.append((title, genre, year, about, rating, similarity))

    results.sort(key=lambda x: x[3], reverse=True)
    return [(title, genre, year, about, rating) for title, genre, year, about, rating, _ in results[:3]]



@user_router.message(Work.wait)
async def process_movie(message: types.Message, state: FSMContext):
    query = message.text.strip()
    results = description(query)

    if not results or len(results) < 3:
        await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    # –§–∏–ª—å–º 1
    title1, genre1, year1, about1, rating1 = results[0]
    response1 = f"üé¨ <b>{title1}</b>\n‚≠ê {rating1}\nüìå {genre1}\nüìñ {about1}"
    keyboard1 = InlineKeyboardBuilder()
    keyboard1.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="ar1")
    keyboard1.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"w1")
    keyboard1.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data="rate1")
    keyboard1.adjust(1)
    await message.answer(response1, parse_mode="HTML", reply_markup=keyboard1.as_markup())

    @user_router.callback_query(F.data == "ar1")
    async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        if "q" not in data:
            await state.update_data(q="")

        data = await state.get_data()
        q = data.get("q", "") + ", " + about1 + ", " + genre1
        await state.update_data(q=q)
        await callback.message.answer(
            "<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
            reply_markup=main_inlines_kb,
            parse_mode='HTML'
        )

        @user_router.callback_query(F.data == "ar1")
        async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
            data = await state.get_data()
            if "q" not in data:
                await state.update_data(q="")

            data = await state.get_data()
            q = data.get("q", "") + ", " + about1 + + ", " + genre1
            await state.update_data(q=q)
            await callback.message.answer(
                "<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
                reply_markup=main_inlines_kb,
                parse_mode='HTML'
            )

    @user_router.callback_query(F.data.startswith("rate1"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title1)
        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º '{title1}' –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w1")
    async def mark_as_watched(callback: types.CallbackQuery, state: FSMContext):
        title = title1
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "watched" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        cursor.execute("UPDATE movies SET watched = 1 WHERE title = ?", (title,))
        conn.commit()
        conn.close()

        await callback.message.answer(f"–§–∏–ª—å–º '{title}' –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!")

    # –§–∏–ª—å–º 2
    title2, genre2, year2, about2, rating2 = results[1]
    response2 = f"üé¨ <b>{title2}</b>\n‚≠ê {rating2}\nüìå {genre2}\nüìñ {about2}"
    keyboard2 = InlineKeyboardBuilder()
    keyboard2.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"add_rec:{title2}")
    keyboard2.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"watched:{title2}")
    keyboard2.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate:{title2}")
    keyboard2.adjust(1)
    await message.answer(response2, parse_mode="HTML", reply_markup=keyboard2.as_markup())

    @user_router.callback_query(F.data == "ar2")
    async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        if "q" not in data:
            await state.update_data(q="")

        data = await state.get_data()
        q = data.get("q", "") + ", " + about2 + ", " + genre2
        await state.update_data(q=q)
        await callback.message.answer(
            "<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
            reply_markup=main_inlines_kb,
            parse_mode='HTML'
        )

    @user_router.callback_query(F.data.startswith("rate2"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title1)
        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º '{title2}' –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w2")
    async def mark_as_watched(callback: types.CallbackQuery, state: FSMContext):
        title = title2
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "watched" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        cursor.execute("UPDATE movies SET watched = 1 WHERE title = ?", (title,))
        conn.commit()
        conn.close()

        await callback.message.answer(f"–§–∏–ª—å–º '{title}' –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!")

    # –§–∏–ª—å–º 3
    title3, genre3, year3, about3, rating3 = results[2]
    response3 = f"üé¨ <b>{title3}</b>\n‚≠ê {rating3}\nüìå {genre3}\nüìñ {about3}"
    keyboard3 = InlineKeyboardBuilder()
    keyboard3.button(text="‚ûï –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"add_rec:{title3}")
    keyboard3.button(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", callback_data=f"watched:{title3}")
    keyboard3.button(text="‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate:{title3}")
    keyboard3.adjust(1)
    await message.answer(response3, parse_mode="HTML", reply_markup=keyboard3.as_markup())

    @user_router.callback_query(F.data == "ar3")
    async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        if "q" not in data:
            await state.update_data(q="")

        data = await state.get_data()
        q = data.get("q", "") + ", " + about3 + ", " + genre3
        await state.update_data(q=q)
        await callback.message.answer(
            "<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
            reply_markup=main_inlines_kb,
            parse_mode='HTML'
        )

    @user_router.callback_query(F.data.startswith("rate3"))
    async def rate_callback(callback: types.CallbackQuery, state: FSMContext):
        await state.update_data(rating_title=title1)
        await callback.message.answer(f"–û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º '{title3}' –æ—Ç 1 –¥–æ 10")
        await state.set_state(Work.mark)

    @user_router.callback_query(F.data == "w3")
    async def mark_as_watched(callback: types.CallbackQuery, state: FSMContext):
        title = title3
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "watched" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
        cursor.execute("UPDATE movies SET watched = 1 WHERE title = ?", (title,))
        conn.commit()
        conn.close()

        await callback.message.answer(f"–§–∏–ª—å–º '{title}' –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π!")

    await state.clear()


@user_router.message(Work.mark)
async def save_rating(message: types.Message, state: FSMContext):
    data = await state.get_data()
    title = data.get("rating_title")

    try:
        rating = int(message.text)
        if 1 <= rating <= 10:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("UPDATE movies SET mark = ? WHERE title = ?", (rating, title))
            conn.commit()
            conn.close()
            await message.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ñ–∏–ª—å–º—É '{title}' –æ—Ü–µ–Ω–∫—É {rating}/10")
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return

    await state.clear()


@user_router.message(Work.process)
async def cmd_ai_process(message: types.Message, state: FSMContext):
    user_text = message.text.strip() if message.text else ""

    if not user_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        return

    data = await state.get_data()
    q = data.get("q", "") + ", " + user_text
    await state.update_data(q=q)
    await message.answer(
        "<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
        reply_markup=main_inlines_kb,
        parse_mode='HTML'
    )
    await set_processing(state, False)



@user_router.message()
async def echo_messages(message: types.Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    if message.text:
        await message.answer(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ...\n–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í–æ—Ç –º–æ–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"                                  "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n")
    else:
        try:
            await message.copy_to(chat_id=message.chat.id)
        except TypeError:
            await message.reply(text="üí•ü´£ –ù–∏—á–µ–≥–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ...")
