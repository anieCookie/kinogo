from aiogram import Router, F
from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
from Keyboards import main_inlines_kb, lib, tags, b, k, f, recommend, first_button_kb, lol_button_kb
from ai_generators import generate
from aiogram.fsm.state import State, StatesGroup
from context import ContexManager
from sentence_transformers import SentenceTransformer
import sqlite3
import os
import json
import numpy as np

DB_PATH = "movies.db"
q = " "
semantic_model = SentenceTransformer("all-MiniLM-L6-v2")

context = ContexManager()
user_router = Router()



#–•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
async def set_processing(state: FSMContext, is_processing: bool):
    await state.update_data(is_processing=is_processing)

async def is_processing(state: FSMContext):
    data = await state.get_data()
    return data.get("is_processing", False)

class Work(StatesGroup):
    wait = State()
    process = State()



#–ë–∞–∑–∞
@user_router.message(F.text == "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
async def clear1(message: types.Message):
    context.contex = {}
    await message.answer(text="–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


#–°—Ç–∞—Ä—Ç
@user_router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–¢—ã –ø–æ–ø–∞–ª –Ω–∞ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã <b>BackSpace</b> üåå, —è —É–≤–µ—Ä–µ–Ω, –≤–∞–º –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è)",
        reply_markup=first_button_kb, parse_mode='HTML')


@user_router.message(F.text == "–ú–µ–Ω—é")
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é ",
                         reply_markup=main_inlines_kb)


@user_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cmd_next(message: types.Message):
    await message.answer("–í–æ—Ç, —á—Ç–æ —è –∑–Ω–∞—é –æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ ",
                         reply_markup=main_inlines_kb)


@user_router.callback_query(F.data == "lib")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=lib)

@user_router.callback_query(F.data == "b")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=b)

@user_router.callback_query(F.data == "k")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=k)

@user_router.callback_query(F.data == "f")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=f)

@user_router.callback_query(F.data == "tag")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=tags)

@user_router.callback_query(F.data == "recommend")
async def cmd_zanatie(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                         reply_markup=recommend)






@user_router.callback_query(F.data == "movie")
async def cmd_search_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–ø–∏—à–∏ —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ")
    await state.set_state(Work.wait)



@user_router.callback_query(F.data == "add_tag")
async def cmd_search_movie(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ")
    await state.set_state(Work.wait)



@user_router.callback_query(F.data == "rec1")
async def cmd_start_eda_callback(callback: types.CallbackQuery, state: FSMContext):
    kek = await callback.message.answer("–°–µ–π—á–∞—Å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è –≤–∞–º", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")
    await state.set_state(Work.process)
    await process_movie(q)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)
    await state.clear()
    await callback.message.answer("<i>–ï—Å–ª–∏ –ø–æ–¥–±–æ—Ä–∫–∞ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∞—Å, –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
                                  " –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –∏—Ö</i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')


@user_router.callback_query(F.data == "rec2")
async def cmd_start_ai(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if "q" not in data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è q
        await state.update_data(q="")  # –°–æ–∑–¥–∞—ë–º q, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

    await callback.message.answer("–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è?")
    await state.set_state(Work.process)


@user_router.callback_query(F.data == "rec3")
async def cmd_start_eda_callback(callback: types.CallbackQuery, q: q):
    kek = await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...", reply_markup=lol_button_kb)
    timer_message = await callback.message.answer("‚è≥")
    q = " "

    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=timer_message.message_id)
    await callback.bot.delete_message(chat_id=callback.from_user.id, message_id=kek.message_id)
    await callback.message.answer("<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã</i>",
                                  reply_markup=main_inlines_kb, parse_mode='HTML')




def description(query):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, rating, embedding_str FROM movies")
    rows = cursor.fetchall()
    conn.close()

    query_embedding = semantic_model.encode(query)
    results = []

    for title, rating, emb_str in rows:
        try:
            movie_embedding = np.array(json.loads(emb_str))
        except Exception:
            continue
        norm_q = np.linalg.norm(query_embedding)
        norm_m = np.linalg.norm(movie_embedding)
        similarity = np.dot(query_embedding, movie_embedding) / (norm_q * norm_m) if norm_q and norm_m else 0
        results.append((title, rating, similarity))

    results.sort(key=lambda x: x[2], reverse=True)
    return [(title, rating) for title, rating, _ in results[:3]]

def tag(query):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, rating, genre FROM movies")
    rows = cursor.fetchall()
    conn.close()

    query_embedding = semantic_model.encode(query)
    results = []

    for title, rating, genre in rows:
        genre_embedding = semantic_model.encode(genre)
        norm_q = np.linalg.norm(query_embedding)
        norm_g = np.linalg.norm(genre_embedding)
        similarity = np.dot(query_embedding, genre_embedding) / (norm_q * norm_g) if norm_q and norm_g else 0
        results.append((title, rating, similarity))

    results.sort(key=lambda x: x[2], reverse=True)
    return [(title, rating) for title, rating, _ in results[:3]]

@user_router.message(Work.wait)
async def process_movie(message: types.Message, state: FSMContext):
    query = message.text.strip()
    results = description(query)
    response = "\n\n".join([f"\ud83c\udfae {title}\n‚≠ê {rating}" for title, rating in results]) if results else "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    response = response.encode("utf-16", "surrogatepass").decode("utf-16")
    await message.answer(response)
    await state.clear()




@user_router.message(Work.process)
async def cmd_ai_process(message: types.Message, state: FSMContext):
    user_text = message.text.strip() if message.text else ""

    if not user_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    data = await state.get_data()
    q = data.get("q", "") + ", " + user_text
    await state.update_data(q=q)
    await message.answer(
        "<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</i>",
        reply_markup=main_inlines_kb,
        parse_mode='HTML'
    )
    await set_processing(state, False)



@user_router.message()
async def echo_messages(message: types.Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    if message.text:
        await message.answer(text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ...\n–£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–í–æ—Ç –º–æ–π –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"                                  "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n")
    else:
        try:
            await message.copy_to(chat_id=message.chat.id)
        except TypeError:
            await message.reply(text="üí•ü´£ –ù–∏—á–µ–≥–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ...")